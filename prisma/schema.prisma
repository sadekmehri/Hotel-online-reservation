generator client {
  provider = "prisma-client-js"
}

generator class_validator {
  provider = "prisma-class-validator-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model addresses {
  addressId  Int      @id @default(autoincrement()) @db.UnsignedSmallInt
  address    String   @db.VarChar(50)
  address2   String?  @db.VarChar(50)
  cityId     Int      @db.UnsignedSmallInt
  postalCode String?  @db.VarChar(10)
  phone      String   @unique(map: "uc_address_phone") @db.VarChar(20)
  createDate DateTime @default(now()) @db.DateTime(0)
  lastUpdate DateTime @default(now()) @db.Timestamp(0)
  users      users[]

  @@index([cityId], map: "fk_city_id")
}

model admins {
  adminId    Int      @id @default(autoincrement())
  firstName  String   @db.VarChar(100)
  lastName   String   @db.VarChar(100)
  email      String   @unique(map: "uc_admin_email") @db.VarChar(255)
  password   String   @db.VarChar(255)
  createDate DateTime @default(now()) @db.DateTime(0)
  lastUpdate DateTime @default(now()) @db.Timestamp(0)
}

model bills {
  billId        Int          @id @default(autoincrement())
  reservationId Int
  total         Int
  createDate    DateTime     @default(now()) @db.DateTime(0)
  lastUpdate    DateTime     @default(now()) @db.Timestamp(0)
  reservations  reservations @relation(fields: [reservationId], references: [reservationId], map: "fk_bill_reservation")
  payments      payments[]

  @@index([reservationId], map: "fk_bill_reservation")
}

model cities {
  cityId    Int    @id @default(autoincrement()) @db.UnsignedSmallInt
  city      String @db.VarChar(50)
  countryId Int    @db.UnsignedSmallInt

  @@index([countryId], map: "fk_city_country")
}

model countries {
  countryId Int    @id @default(autoincrement()) @db.UnsignedSmallInt
  name      String @unique(map: "uc_country_name") @db.VarChar(50)
}

model payments {
  paymentId     Int          @id @default(autoincrement())
  billId        Int
  paymentTypeId Int
  status        Boolean      @default(false)
  transactionId String?      @db.VarChar(255)
  createDate    DateTime     @default(now()) @db.DateTime(0)
  lastUpdate    DateTime     @default(now()) @db.Timestamp(0)
  bills         bills        @relation(fields: [billId], references: [billId], map: "fk_payment_bill")
  paymenttypes  paymenttypes @relation(fields: [paymentTypeId], references: [paymentTypeId], map: "fk_payment_payment_type")

  @@index([billId], map: "fk_payment_bill")
  @@index([paymentTypeId], map: "fk_payment_payment_type")
}

model paymenttypes {
  paymentTypeId Int        @id @default(autoincrement())
  name          String     @unique(map: "uc_payment_type_name") @db.VarChar(100)
  payments      payments[]
}

model reservations {
  reservationId Int             @id @default(autoincrement())
  userId        Int
  dateIn        DateTime        @db.Date
  dateOut       DateTime        @db.Date
  createDate    DateTime        @default(now()) @db.DateTime(0)
  lastUpdate    DateTime        @default(now()) @db.Timestamp(0)
  users         users           @relation(fields: [userId], references: [userId], map: "fk_reservation_user")
  bills         bills[]
  reservedrooms reservedrooms[]

  @@index([userId], map: "fk_reservation_user")
}

model reservedrooms {
  reservedRoomId Int          @default(autoincrement())
  reservationId  Int
  roomId         Int
  price          Int
  status         Boolean      @default(false)
  reservations   reservations @relation(fields: [reservationId], references: [reservationId], map: "fk_reservedroom_reservation")
  rooms          rooms        @relation(fields: [roomId], references: [roomId], map: "fk_reservedroom_room")

  @@id([reservedRoomId, reservationId, roomId])
  @@index([reservationId], map: "fk_reservedroom_reservation")
  @@index([roomId], map: "fk_reservedroom_room")
}

model roomratings {
  roomRatingId Int      @id @default(autoincrement())
  rating       Int      @db.SmallInt
  description  String   @db.TinyText
  roomId       Int
  userId       Int
  createDate   DateTime @default(now()) @db.DateTime(0)
  lastUpdate   DateTime @default(now()) @db.Timestamp(0)
  rooms        rooms    @relation(fields: [roomId], references: [roomId], map: "fk_roomrating_room")
  users        users    @relation(fields: [userId], references: [userId], map: "fk_roomrating_user")

  @@index([roomId], map: "fk_roomrating_room")
  @@index([userId], map: "fk_roomrating_user")
}

model rooms {
  roomId        Int             @id @default(autoincrement())
  code          String          @unique(map: "uc_room_code") @db.VarChar(100)
  status        Boolean         @default(true)
  reserved      Boolean         @default(false)
  price         Int
  roomTypeId    Int
  createDate    DateTime        @default(now()) @db.DateTime(0)
  lastUpdate    DateTime        @default(now()) @db.Timestamp(0)
  roomtypes     roomtypes       @relation(fields: [roomTypeId], references: [roomTypeId], map: "fk_room_room_type")
  reservedrooms reservedrooms[]
  roomratings   roomratings[]

  @@index([roomTypeId], map: "fk_room_room_type")
}

model roomtypes {
  roomTypeId  Int     @id @default(autoincrement())
  description String  @db.VarChar(200)
  rooms       rooms[]
}

model users {
  userId           Int            @id @default(autoincrement())
  firstName        String         @db.VarChar(100)
  lastName         String         @db.VarChar(100)
  email            String         @unique(map: "uc_user_email") @db.VarChar(255)
  cin              String         @unique(map: "uc_user_cin") @db.VarChar(100)
  dob              DateTime       @db.Date
  password         String         @db.VarChar(255)
  refreshToken     String?        @db.TinyText
  isEmailConfirmed Boolean        @default(false)
  isActive         Boolean        @default(false)
  addressId        Int?           @db.UnsignedSmallInt
  createDate       DateTime       @default(now()) @db.DateTime(0)
  lastUpdate       DateTime       @default(now()) @db.Timestamp(0)
  addresses        addresses?     @relation(fields: [addressId], references: [addressId], onDelete: Restrict, map: "fk_user_address")
  reservations     reservations[]
  roomratings      roomratings[]

  @@index([addressId], map: "fk_user_address")
}
